Code: ColorTableAttributes.C
Prefix:
#define ADDTAG        0
#define REMOVETAG     1
#define ADDTAGSTR    "0"
#define REMOVETAGSTR "1"

class TagInfo
{
public:
    // Is this tag turned on or off?
    bool active = false;

    // How many color tables are associated with this tag
    int numrefs = 0;

    // data object to store tag changes
    std::set<std::pair<int, std::string>> changes;
    // Each tag is associated with a set (std::set) of representations of tag 
    // changes. These representations consist of pairs (std::pair), where the 
    // first element in each is a constant equal to either ADDTAG (0) or 
    // REMOVETAG (1) and the second element is the name of the color table 
    // (std::string) being added to or removed from.
    // 
    // This data structure is updated on the fly to reflect the latest tag 
    // changes. It is also used to determine if a tag change is legal
    // (particularly if a color table is built in), and it is saved out to 
    // state files.

    // A ptr to the tag table entry for this tag so it can be easily found
    // and deleted if `numrefs` drops to 0.
    void *tagTableItem = nullptr;
};

// This is your one stop shop for information about each tag.
static std::map<std::string, TagInfo> tagList;
// We are mapping tag names (std::string) to metadata (TagInfo).
Postfix:

Code: ColorTableAttributes.h
Prefix:
class TagInfo;
Postfix:

Target: xml2python
Code: PyColorTableAttributes_getattr
Prefix:
#include <visit-config.h>
Postfix:
#if VISIT_OBSOLETE_AT_VERSION(3,5,0)
#error This code is obsolete in this version. Please remove it.
#else
    // Try and handle legacy fields in ColorTableAttributes

    //
    // Removed in 3.3.0
    //
    if(strcmp(name, "activeContinuous") == 0)
    {
        ColorTableAttributesObject *ColorTableObj = (ColorTableAttributesObject *)self;
        std::string defaultContinuous = ColorTableObj->data->GetDefaultContinuous();
        return PyString_FromString(defaultContinuous.c_str());
    }
    if(strcmp(name, "activeDiscrete") == 0)
    {
        ColorTableAttributesObject *ColorTableObj = (ColorTableAttributesObject *)self;
        std::string defaultDiscrete = ColorTableObj->data->GetDefaultDiscrete();
        return PyString_FromString(defaultDiscrete.c_str());
    }
#endif
#if VISIT_OBSOLETE_AT_VERSION(3,6,0)
#error This code is obsolete in this version. Please remove it.
#else
    // Try and handle legacy fields in ColorTableAttributes

    //
    // Removed in 3.4.0
    //
    if(strcmp(name, "taggingFlag") == 0)
    {
        PyErr_WarnEx(NULL,
                    "taggingFlag is no longer a valid Color Table "
                    "attribute.\nIt's value is being ignored, please remove "
                    "it from your script.\n", 3);
        return PyInt_FromLong(0L);
    }
#endif

Code: PyColorTableAttributes_setattr
Prefix:
#include <visit-config.h>
Postfix:
#if VISIT_OBSOLETE_AT_VERSION(3,5,0)
#error This code is obsolete in this version. Please remove it.
#else
   // Try and handle legacy fields in ColorTableAttributes
    if(obj == &NULL_PY_OBJ)
    {
        ColorTableAttributesObject *ColorTableObj = (ColorTableAttributesObject *)self;

        //
        // Removed in 3.3.0
        //
        if(strcmp(name, "activeContinuous") == 0)
        {
            const std::string defaultCont = PyString_AsString(args);
            PyErr_WarnEx(NULL, "'activeContinuous' is obsolete. Use 'defaultContinuous'.", 3);
            ColorTableObj->data->SetDefaultContinuous(defaultCont);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        if(strcmp(name, "activeDiscrete") == 0)
        {
            const std::string defaultDisc = PyString_AsString(args);
            PyErr_WarnEx(NULL, "'activeDiscrete' is obsolete. Use 'defaultDiscrete'.", 3);
            ColorTableObj->data->SetDefaultDiscrete(defaultDisc);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }
#endif
#if VISIT_OBSOLETE_AT_VERSION(3,6,0)
#error This code is obsolete in this version. Please remove it.
#else
   // Try and handle legacy fields in ColorTableAttributes
    if(obj == &NULL_PY_OBJ)
    {
        //
        // Removed in 3.4.0
        //
        if(strcmp(name, "taggingFlag") == 0)
        {
            PyErr_WarnEx(NULL, "'taggingFlag' is obsolete. Tags are always enabled now.", 3);
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }
#endif

Target: xml2atts
Initialization: tagsMatchAny
    tagsMatchAny = true;
    
    // We set the 'Default' and 'User Defined' tags to active by default; this can 
    // be overridden by setting from node.
    tagList["Default"].active = true;
    tagList["User Defined"].active = true;
    // if no color tables have these tags, then they will be pruned later by the color table window

Function: GetColorTableIndex
Declaration: int GetColorTableIndex(const std::string &name) const;
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetColorTableIndex
//
// Purpose:
//   Returns the index of the specified color table.
//
// Arguments:
//   name : The name of the color table that we want.
//
// Returns:    The index or -1 if the color table is not in the list.
//
// Note:
//
// Programmer: Brad Whitlock
// Creation:   Sat Jun 16 20:32:23 PST 2001
//
// Modifications:
//
// ****************************************************************************

int
ColorTableAttributes::GetColorTableIndex(const std::string &name) const
{
    int retval = -1;
    for(size_t i = 0; i < names.size(); ++i)
    {
        if(names[i] == name)
        {
            retval = i;
            break;
        }
    }

    return retval;
}

Target: xml2java
Function: GetColorTableIndex
Declaration: GetColorTableIndex
Definition:
    public int GetColorTableIndex(String name)
    {
        int retval = -1;
        for(int i = 0; i < names.size(); ++i)
        {
            String n = (String)names.elementAt(i);
            if(n.equals(name))
            {
                retval = i;
                break;
            }
        }

        return retval;
    }

Target: xml2atts
Function: GetColorControlPoints1
Declaration: const ColorControlPointList *GetColorControlPoints(int index) const;
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetColorControlPoints
//
// Purpose:
//   Returns a pointer to the color control points for the specified color
//   table index.
//
// Arguments:
//   index : The index for which we want the color control points.
//
// Returns:    The color control points or NULL.
//
// Note:
//
// Programmer: Brad Whitlock
// Creation:   Sat Jun 16 20:33:22 PST 2001
//
// Modifications:
//
// ****************************************************************************

const ColorControlPointList *
ColorTableAttributes::GetColorControlPoints(int index) const
{
    if(index >= 0 && (size_t)index < colorTables.size())
        return ((ColorControlPointList *)colorTables[index]);
    else
        return 0;
}

Target: xml2java
Function: GetColorControlPoints1
Declaration: GetColorControlPoints1
Definition:
    public ColorControlPointList GetColorControlPoints(int index)
    {
        if(index >= 0 && index < colorTables.size())
            return (ColorControlPointList)colorTables.elementAt(index);
        else
            return null;
    }

Target: xml2atts
Function: GetColorControlPoints2
Declaration: const ColorControlPointList *GetColorControlPoints(const std::string &name) const;
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetColorControlPoints
//
// Purpose:
//   Returns a pointer to the color control points for the specified color
//   table index.
//
// Arguments:
//   name : The name of the color table for which we want the color control
//          points.
//
// Returns:    The color control points or NULL.
//
// Note:
//
// Programmer: Brad Whitlock
// Creation:   Sat Jun 16 20:33:22 PST 2001
//
// Modifications:
//
// ****************************************************************************

const ColorControlPointList *
ColorTableAttributes::GetColorControlPoints(const std::string &name) const
{
    int index = GetColorTableIndex(name);

    if(index >= 0 && (size_t)index < colorTables.size())
        return ((ColorControlPointList *)colorTables[index]);
    else
        return 0;
}

Target: xml2java
Function: GetColorControlPoints2
Declaration: GetColorControlPoints2
Definition:
    public ColorControlPointList GetColorControlPoints(String name)
    {
        int index = GetColorTableIndex(name);
        if(index >= 0 && index < colorTables.size())
            return (ColorControlPointList)colorTables.elementAt(index);
        else
            return null;
    }

Function: GetDefaultColorControlPoints
Declaration: GetDefaultColorControlPoints
Definition:
    public ColorControlPointList GetDefaultColorControlPoints()
    {
        int index = GetColorTableIndex(defaultContinuous);
        if(index >= 0 && index < colorTables.size())
            return (ColorControlPointList)colorTables.elementAt(index);
        else
            return null;
    }

Target: xml2atts
Function: AddColorTable
Declaration: void AddColorTable(const std::string &name, ColorControlPointList &cpts);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::AddColorTable
//
// Purpose:
//   Adds a new color table to the list.
//
// Arguments:
//   name : The name of the new color table.
//   cpts : The color control points for the new color table.
//
// Programmer: Brad Whitlock
// Creation:   Sat Jun 16 20:35:43 PST 2001
//
// Modifications:
//   Brad Whitlock, Mon Nov 25 12:00:52 PDT 2002
//   I added code to sort the color table using a map.
//
//   Brad Whitlock, Mon Mar 13 17:14:55 PST 2006
//   Make sure that a pre-existing color table with the same name is removed
//   before adding the new color table.
//
//   Hank Childs, Thu Jan 17 16:41:34 PST 2008
//   Preserve the default continuous/discrete status if a color table is
//   being replaced.
//
//  Justin Privitera, Fri May 20 11:02:45 PDT 2022
//  Replaced *active* w/ *default* for everything color tables.
// 
//   Justin Privitera, Thu Jun 16 18:01:49 PDT 2022
//   Added logic for `active` parallel to `names`.
// 
//   Justin Privitera, Wed Aug  3 19:46:13 PDT 2022
//   Do nothing if the color table is built-in.
//
// ****************************************************************************

void
ColorTableAttributes::AddColorTable(const std::string &name,
                                    ColorControlPointList &cpts)
{
    bool defaultContinuous = false;
    if (GetDefaultContinuous() == name)
        defaultContinuous = true;
    bool defaultDiscrete = false;
    if (GetDefaultDiscrete() == name)
        defaultDiscrete = true;

    // Remove the color table if it already exists in the list.
    int index = GetColorTableIndex(name);
    if(index != -1)
    {
        // but do nothing if the color table is built-in
        if (GetColorControlPoints(index)->GetBuiltIn())
            return;
        RemoveColorTable(index);
    }

    // if this table doesn't have tags, then add the no-tags tag
    if (cpts.GetNumTags() == 0)
    {
        cpts.AddTag("No Tags");
    }

    // iterate thru each tag in the given color table
    for (int j = 0; j < cpts.GetNumTags(); j ++)
    {
        // add the tag if it is not already in the global tag list
        std::string currtag = cpts.GetTag(j);
        if (! CheckTagInTagList(currtag))
            // add the tag to the tag list
            tagList[currtag].active = false;
        tagList[currtag].numrefs ++;
    }

    std::cout << "tag list after adding color table " << name << std::endl;
    PrintTagList();
    std::cout << "======" << std::endl;

    cpts.SetTagChangesMade(true);

    // Append the color table to the list.
    names.push_back(name);
    active.push_back(true);
    AddColorTables(cpts);

    // Store the name, colortable pairs into a map.
    std::map<std::string, AttributeGroup *> sortMap;
    size_t i;
    for(i = 0; i < names.size(); ++i)
        sortMap[names[i]] = colorTables[i];

    // Traverse the map, it will be sorted. Store the names and color table
    // pointer back into the old vectors.
    std::map<std::string, AttributeGroup *>::iterator pos;
    for(i = 0, pos = sortMap.begin(); pos != sortMap.end(); ++pos, ++i)
    {
        names[i] = pos->first;
        colorTables[i] = pos->second;
    }

    // determine if this color table belongs in the current tag filtering selection
    int CTindex = GetColorTableIndex(name);
    if (CTindex >= 0 && CTindex < active.size())
        active[CTindex] = FilterTableByTag(cpts);

    if (defaultContinuous)
        SetDefaultContinuous(name);
    if (defaultDiscrete)
        SetDefaultDiscrete(name);

    Select(0, (void *)&names);
}

Target: xml2java
Function: AddColorTable
Declaration: AddColorTable
Definition:
    public void AddColorTable(String name, ColorControlPointList cpts)
    {
        names.addElement(new String(name));
        active.addElement(true);
        Select(0);
        AddColorTables(cpts);
    }

Target: xml2atts
Function: RemoveColorTable1
Declaration: void RemoveColorTable(const std::string &name);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::RemoveColorTable
//
// Purpose:
//   Removes the named color table from the list.
//
// Arguments:
//   name : The name of the color table to remove.
//
// Programmer: Brad Whitlock
// Creation:   Sat Jun 16 20:36:30 PST 2001
//
// Modifications:
//
// ****************************************************************************

void
ColorTableAttributes::RemoveColorTable(const std::string &name)
{
    int index = GetColorTableIndex(name);
    RemoveColorTable(index);
}

Target: xml2java
Function: RemoveColorTable1
Declaration: RemoveColorTable1
Definition:
    public void RemoveColorTable(String name)
    {
        int index = GetColorTableIndex(name);
        RemoveColorTable(index);
    }

Target: xml2atts
Function: RemoveColorTable2
Declaration: void RemoveColorTable(int index);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::RemoveColorTable
//
// Purpose:
//   Removes the color table at the specified list index.
//
// Arguments:
//   index : The index of the color table we want to remove.
//
// Programmer: Brad Whitlock
// Creation:   Sat Jun 16 20:37:03 PST 2001
//
// Modifications:
//   Brad Whitlock, Wed Nov 20 12:08:18 PDT 2002
//   Made it work with the new discrete color tables.
//
//  Justin Privitera, Fri May 20 11:02:45 PDT 2022
//  Replaced *active* w/ *default* for everything color tables.
// 
//   Justin Privitera, Thu Jun 16 18:01:49 PDT 2022
//   Added logic for `active` array parallel to `names`.
// 
//   Justin Privitera, Wed Aug  3 19:46:13 PDT 2022
//   Do nothing if color table is built in.
// 
//   Justin Privitera, Wed Sep 21 16:51:24 PDT 2022
//   Added additional logic to try and find the next appropriate color table
//   if either the default continuous or discrete color tables are deleted.
// 
//    Justin Privitera, Thu Sep 29 17:27:37 PDT 2022
//    Replace auto w/ bool. Add in missing breaks.
//
// ****************************************************************************

void
ColorTableAttributes::RemoveColorTable(int index)
{
    if(index >= 0 && (size_t)index < names.size())
    {
        // do nothing if the color table is built-in.
        if (GetColorControlPoints(index)->GetBuiltIn())
            return;

        // Determine if the color table is default.
        bool isDefaultContinuous, isDefaultDiscrete;
        isDefaultContinuous = (names[index] == defaultContinuous);
        isDefaultDiscrete = (names[index] == defaultDiscrete);

        for (auto tag : GetColorControlPoints(index)->GetTagNames())
            tagList[tag].numrefs --;

        // Iterate through the vector "index" times.
        stringVector::iterator pos = names.begin();
        intVector::iterator pos2 = active.begin();
        for(int i = 0; i < index; ++i)
        {
            ++pos;
            ++pos2;
        }

        // If pos is still a valid iterator, remove that element.
        if(pos != names.end())
        {
            names.erase(pos);
            active.erase(pos2);
        }

        // Indicate that things have changed by selecting the list.
        Select(0, (void *)&names);

        // erase the color table from the vector.
        RemoveColorTables(index);

        // If it is the default color table that was removed, reset the
        // default color table to the first element.
        if(isDefaultContinuous)
        {
            if(names.size() > 0)
            {
                bool found{false};
                for (int i = 0; i < names.size(); i ++)
                {
                    if (! GetColorTables(i).GetDiscreteFlag())
                    {
                        SetDefaultContinuous(names[i]);
                        found = true;
                        break;
                    }
                }
                if (! found)
                    SetDefaultContinuous(std::string(""));
            }
            else
                SetDefaultContinuous(std::string(""));
        }
        if(isDefaultDiscrete)
        {
            if(names.size() > 0)
            {
                bool found{false};
                for (int i = 0; i < names.size(); i ++)
                {
                    if (GetColorTables(i).GetDiscreteFlag())
                    {
                        SetDefaultDiscrete(names[i]);
                        found = true;
                        break;
                    }
                }
                if (! found)
                    SetDefaultDiscrete(std::string(""));
            }
            else
                SetDefaultDiscrete(std::string(""));
        }
    }
}

Target: xml2java
Function: RemoveColorTable2
Declaration: RemoveColorTable2
Definition:
    public void RemoveColorTable(int index)
    {
        if(index >= 0 && index < names.size())
        {
            String nameAt = (String)names.elementAt(index);
            boolean isDefaultContinuous = nameAt.equals(defaultContinuous);
            boolean isDefaultDiscrete = nameAt.equals(defaultDiscrete);

            // Remove the name from the vector.
            names.remove(index);
            active.remove(index);
            Select(0);

            // Remove the color table from the vector.
            RemoveColorTables(index);

            // If it is the default color table that was removed, reset the
            // default color table to the first element.
            if(isDefaultContinuous)
            {
                if(names.size() > 0)
                {
                    nameAt = (String)names.elementAt(0);
                    SetDefaultContinuous(nameAt);
                }
                else
                    SetDefaultContinuous("");
            }
            if(isDefaultDiscrete)
            {
                if(names.size() > 0)
                {
                    nameAt = (String)names.elementAt(0);
                    SetDefaultDiscrete(nameAt);
                }
                else
                    SetDefaultDiscrete("");
            }
        }
    }

Target: xml2atts
Function: SetNames
Declaration: virtual bool SetNames(const stringVector &names_);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::SetNames
//
// Purpose:
//   Setter for names.
//
// Note:       There needs to be a custom setter.
//
// Programmer: Justin Privitera
// Creation:   Thu Jun 16 11:59:26 PDT 2022
//
// Modifications:
//
// ****************************************************************************

void
ColorTableAttributes::SetNames(const stringVector &names_)
{
    names = names_;
    Select(ID_names, (void *)&names);
    if (active.size() != names.size())
    {
        intVector newactive;
        for (int i = 0; i < names.size(); i ++)
            newactive.push_back(true);
        SetActive(newactive);
    }
}

Function: SetActive
Declaration: virtual void SetActive(const stringVector &names_);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::SetActive
//
// Purpose:
//   Setter for active.
//
// Note:       There needs to be a custom setter.
//
// Programmer: Justin Privitera
// Creation:   Thu Jun 16 11:59:26 PDT 2022
//
// Modifications:
//
// ****************************************************************************

void
ColorTableAttributes::SetActive(const intVector &active_)
{
    if (active_.size() == names.size())
    {
        active = active_;
        Select(ID_active, (void *)&active);
    }
}

Function: CreateNode
Declaration: virtual bool CreateNode(DataNode *node, bool, bool);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::CreateNode
//
// Purpose:
//   This method creates a DataNode representation of the object so it can be saved to a config file.
//
// Note:       Autogenerated by classwriter.
//
// Programmer: classwriter
// Creation:   Mon Jun 11 10:41:36 PDT 2001
//
// Modifications:
//   Brad Whitlock, Mon Jun 18 22:03:23 PST 2001
//   Custom coded this method since classwriter's resulting output format
//   was ridiculous.
//
//   Brad Whitlock, Wed Nov 20 12:24:43 PDT 2002
//   I made it work with discrete colortables.
//
//   Brad Whitlock, Tue May 20 10:21:14 PDT 2003
//   I made it saved out only what needs to be saved out.
//
//   Brad Whitlock, Mon Jul 7 16:51:05 PST 2003
//   I prevented it from saving out colortables that are external.
//
//   Brad Whitlock, Wed Dec 17 12:21:24 PDT 2003
//   I added another bool argument.
//
//   Brad Whitlock, Tue Mar 13 10:40:04 PDT 2007
//   Updated due to code generator changes.
//
//   Brad Whitlock, Fri Dec 14 16:07:50 PST 2007
//   Made it use ids.
//
//   Hank Childs, Thu Jul  1 14:20:26 PDT 2010
//   Write out opacities.
//
//   Brad Whitlock, Fri Apr 27 14:16:01 PDT 2012
//   Change smoothing.
//
//  Justin Privitera, Fri May 20 11:02:45 PDT 2022
//  Replaced *active* w/ *default* for everything color tables.
// 
//   Justin Privitera, Thu Jun 16 18:01:49 PDT 2022
//   Added tags and removed categories.
// 
//   Justin Privitera, Wed Jul 27 12:16:06 PDT 2022
//   Removed logic that saved info about individual color tables.
// 
//   Justin Privitera, Mon Feb 13 14:32:02 PST 2023
//   Removed logic to save the tagging flag, as it no longer exists.
//
// ****************************************************************************

bool
ColorTableAttributes::CreateNode(DataNode *parentNode, bool, bool)
{
    if(parentNode == 0)
        return true;

    // Create a node for ColorTableAttributes.
    DataNode *node = new DataNode("ColorTableAttributes");
    node->AddNode(new DataNode("defaultContinuous", defaultContinuous));
    node->AddNode(new DataNode("defaultDiscrete", defaultDiscrete));

    stringVector tagNames;
    boolVector activeTags;
    for (const auto mapitem : tagList)
    {
        tagNames.emplace_back(mapitem.first);
        activeTags.push_back(mapitem.second.active);
    }
    node->AddNode(new DataNode("tagList", tagNames));
    node->AddNode(new DataNode("activeTags", activeTags));
    node->AddNode(new DataNode("tagsMatchAny", tagsMatchAny));
    node->AddNode(new DataNode("tagChanges", StringifyTagChanges()));

    // Add the node to the parent node.
    parentNode->AddNode(node);

    return true;
}

Function: SetFromNode
Declaration: virtual void SetFromNode(DataNode *node);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::SetFromNode
//
// Purpose:
//   This method sets attributes in this object from values in a DataNode representation of the object.
//
// Note:       Autogenerated by classwriter.
//
// Programmer: classwriter
// Creation:   Mon Jun 11 10:41:36 PDT 2001
//
// Modifications:
//   Brad Whitlock, Mon Jun 18 23:43:59 PST 2001
//   I rewrote it so it matches the format that is written in CreateNode.
//
//   Brad Whitlock, Wed Nov 20 12:26:24 PDT 2002
//   I made it work with discrete color tables.
//
//   Hank Childs, Thu Jul  1 14:20:26 PDT 2010
//   Add support for opacities.
//
//  Justin Privitera, Fri May 20 11:02:45 PDT 2022
//  Replaced *active* w/ *default* for everything color tables.
// 
//   Justin Privitera, Thu Jun 16 18:01:49 PDT 2022
//   Added tags and removed categories.
// 
//   Justin Privitera, Wed Jul 27 12:16:06 PDT 2022
//   Removed logic that read info about individual color tables.
// 
//   Justin Privitera, Mon Feb 13 14:32:02 PST 2023
//   Removed logic to extract the tagging flag, as it no longer exists.
//
// ****************************************************************************

void
ColorTableAttributes::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("ColorTableAttributes");
    if(searchNode == 0)
        return;

    DataNode *node = 0;
    if((node = searchNode->GetNode("defaultContinuous")) != 0)
        SetDefaultContinuous(node->AsString());

    if((node = searchNode->GetNode("defaultDiscrete")) != 0)
        SetDefaultDiscrete(node->AsString());

    // For older version compatibility...
    if((node = searchNode->GetNode("defaultColorTable")) != 0)
        SetDefaultContinuous(node->AsString());

    DataNode *node2;
    if((node = searchNode->GetNode("tagList")) != 0 && (node2 = searchNode->GetNode("activeTags")) != 0)
    {
        stringVector tagNames{node->AsStringVector()};
        std::vector<bool> activeTags{node2->AsBoolVector()};
        if (tagNames.size() == activeTags.size())
        {
            for (int i = 0; i < tagNames.size(); i ++)
                tagList[tagNames[i]].active = activeTags[i];
        }
        else
        {
            // QString tmp;
            // tmp = tr("The color table tag names list and active tags list ") + 
            //       tr("should be the same size. ") + 
            //       tr("Has your config/session file been corrupted?");
            // Error(tmp);
            // TODO
            for (int i = 0; i < tagNames.size(); i ++)
                tagList[tagNames[i]].active = false;
        }
    }
    if((node = searchNode->GetNode("tagsMatchAny")) != 0)
        tagsMatchAny = node->AsBool();
    if((node = searchNode->GetNode("tagChanges")) != 0)
        UnstringifyAndMergeTagChanges(node->AsStringVector());

    FilterTablesByTag();
}

Function: GetActiveElement
Declaration: bool GetActiveElement(int index);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetActiveElement
//
// Purpose:
//   Gets the state of a given color table (active or inactive (appearing in
//   the namelistbox or not)).
//
// Arguments:
//   index - index of the tag
//
// Programmer: Justin Privitera
// Creation:   Tue Jun 28 14:04:01 PDT 2022
//
// Modifications:
//
// ****************************************************************************

bool
ColorTableAttributes::GetActiveElement(int index)
{
    if (index >= 0 && index < active.size())
        return active[index];
    return false;
}

Function: StringifyTagChanges
Declaration: stringVector StringifyTagChanges();
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::StringifyTagChanges
//
// Purpose: Packs the tag changes data structure into a string vector so it
//    can be easily written to a node.
//
// Programmer: Justin Privitera
// Creation:   Thu Aug 25 15:04:55 PDT 2022
//
// Modifications:
//    Justin Privitera, Wed Sep 21 16:51:24 PDT 2022
//    The tagList and tagChanges data structures have been merged.
//
// ****************************************************************************
stringVector
ColorTableAttributes::StringifyTagChanges()
{
    stringVector retval;
    for (const auto& mapitem : tagList)
    {
        std::stringstream changes;
        changes << mapitem.first << ":";
        for (const auto& setitem : mapitem.second.changes)
            changes << setitem.first << "," << setitem.second << ";";
        retval.emplace_back(changes.str());
    }
    return retval;
}

Function: UnstringifyAndMergeTagChanges
Declaration: void UnstringifyAndMergeTagChanges(stringVector changes);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::UnstringifyAndMergeTagChanges
//
// Purpose: Converts a stringvector representation of tag changes into 
//    actionable tag changes. Adds them to the tag changes data structure and
//    makes the changes happen.
//
// Programmer: Justin Privitera
// Creation:   Thu Aug 25 15:04:55 PDT 2022
//
// Modifications:
//    Justin Privitera, Wed Sep 21 16:51:24 PDT 2022
//    Reversed how tag changes are represented (internally and when saved to
//    files) so now tag names are mapped to sets of pairs of color table names
//    and integers.
// 
//    Justin Privitera, Thu Sep 29 17:27:37 PDT 2022
//    Replace braces with parens for auto.
//
// ****************************************************************************
void
ColorTableAttributes::UnstringifyAndMergeTagChanges(stringVector changes)
{
    std::for_each(changes.begin(), changes.end(), 
        [this](std::string ctTagChanges)
        {
            size_t titleSep = ctTagChanges.find(":");
            std::string tagName{ctTagChanges.substr(0, titleSep)};
            std::string table{ctTagChanges.substr(titleSep + 1)};

            size_t addRemoveSep{table.find(",")};
            size_t entrySep{0};

            while (addRemoveSep != std::string::npos)
            {
                std::string addRemoveText{table.substr(entrySep, addRemoveSep - entrySep)};
                entrySep = table.find(";", entrySep);
                addRemoveSep += 1;
                std::string ctName{table.substr(addRemoveSep, entrySep - addRemoveSep)};
                addRemoveSep = table.find(",", addRemoveSep);
                entrySep += 1;

                auto *ccpl(const_cast<ColorControlPointList *>(GetColorControlPoints(ctName)));
                auto result(ccpl->ValidateTag(tagName));
                if (result.first)
                {
                    if (addRemoveText == ADDTAGSTR && ! ccpl->HasTag(tagName))
                        addTagToColorTable(ctName, tagName, ccpl);
                    else if (addRemoveText == REMOVETAGSTR && ccpl->HasTag(tagName))
                        removeTagFromColorTable(ctName, tagName, ccpl);
                }
                else
                {
                    debug1 << "ColorTableAttributes WARNING: " << result.second;
                }
            }
        });
}

Function: addTagToColorTable
Declaration: void addTagToColorTable(const std::string ctName, const std::string tagName, ColorControlPointList* ccpl);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::addTagToColorTable
//
// Purpose:
//    Helper function for adding tags to color tables... carefully!
//
// Programmer: Justin Privitera
// Creation:   Thu Aug 25 15:04:55 PDT 2022
//
// Modifications:
//    Justin Privitera, Wed Sep 21 16:51:24 PDT 2022
//    Merged tagList and tagChanges data structures.
//    Kept track of tag refcount on deletion.
// 
//    Justin Privitera, Thu Sep 29 17:27:37 PDT 2022
//    Replace braces with parens for auto.
//
// ****************************************************************************
void
ColorTableAttributes::addTagToColorTable(const std::string ctName, 
                                         const std::string tagName,
                                         ColorControlPointList* ccpl)
{
    auto tagChangeReverseAction(std::make_pair(REMOVETAG, ctName));
    if (tagList[tagName].changes.find(tagChangeReverseAction) != 
        tagList[tagName].changes.end())
        tagList[tagName].changes.erase(tagChangeReverseAction);
    else
        tagList[tagName].changes.insert(std::make_pair(ADDTAG, ctName));
    ccpl->AddTag(tagName);
    tagList[tagName].numrefs ++;
}

Function: removeTagFromColorTable
Declaration: std::pair<bool, std::string> removeTagFromColorTable(const std::string ctName, const std::string tagName, ColorControlPointList* ccpl);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::removeTagFromColorTable
//
// Purpose:
//    Helper function for removing tags from color tables... carefully!
//
// Programmer: Justin Privitera
// Creation:   Thu Aug 25 15:04:55 PDT 2022
//
// Modifications:
//    Justin Privitera, Wed Sep 21 16:51:24 PDT 2022
//    Merged tagList and tagChanges data structures.
//    Kept track of tag refcount on deletion.
// 
//    Justin Privitera, Thu Sep 29 17:27:37 PDT 2022
//    Replace braces with parens for auto.
//
// ****************************************************************************
std::pair<bool, std::string>
ColorTableAttributes::removeTagFromColorTable(const std::string ctName, 
                                              const std::string tagName,
                                              ColorControlPointList* ccpl)
{
    bool success{true};
    std::string outstr{""};
    auto tagChangeReverseAction(std::make_pair(ADDTAG, ctName));
    if (tagList[tagName].changes.find(tagChangeReverseAction) != 
        tagList[tagName].changes.end())
    {
        tagList[tagName].changes.erase(tagChangeReverseAction);
        ccpl->RemoveTag(tagName);
        tagList[tagName].numrefs --;
    }
    else
    {
        // if this is a built in color table, you can only remove a 
        // tag if the add tag action is already there (the previous case)
        if (ccpl->GetBuiltIn())
        {
            success = false;
            outstr = "The color table \"" + ctName + "\" is built-in. You "
                     "cannot delete a default tag from a built-in color table.";
        }
        else
        {
            tagList[tagName].changes.insert(std::make_pair(REMOVETAG, ctName));
            ccpl->RemoveTag(tagName);
            tagList[tagName].numrefs --;
        }
    }

    return std::make_pair(success, outstr);
}

Function: AllTagsSelected
Declaration: bool AllTagsSelected();
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::AllTagsSelected
//
// Purpose:
//    Returns whether or not all tags are currently selected/enabled.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
bool
ColorTableAttributes::AllTagsSelected()
{
    return std::all_of(tagList.begin(), tagList.end(), 
                       [](std::pair<std::string, TagInfo> const tagListEntry)
                       { return tagListEntry.second.active; });
}

Function: EnableDisableAllTags
Declaration: void EnableDisableAllTags(bool enable, std::vector<void *> &tagTableItems);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::EnableDisableAllTags
//
// Purpose:
//    TODO
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::EnableDisableAllTags(bool enable, std::vector<void *> &tagTableItems)
{
    for (auto &tagListEntry : tagList)
    {
        tagListEntry.second.active = enable;
        // we trust that the caller will check or uncheck all tag table items
        tagTableItems.push_back(tagListEntry.second.tagTableItem);
    }
}

Function: SetTagActive
Declaration: void SetTagActive(const std::string tagname, bool active);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::SetTagActive
//
// Purpose:
//    TODO
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::SetTagActive(const std::string tagname, bool active)
{
    tagList[tagname].active = active;
}

Function: GetTagActive
Declaration: bool GetTagActive(const std::string tagname);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetTagActive
//
// Purpose:
//    TODO
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
bool
ColorTableAttributes::GetTagActive(const std::string tagname)
{
    return tagList[tagname].active;
}

Function: GetTagNumRefs
Declaration: int GetTagNumRefs(const std::string tagname);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetTagNumRefs
//
// Purpose:
//    Returns how many color tables have this tag (numrefs).
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
int
ColorTableAttributes::GetTagNumRefs(const std::string tagname)
{
    return tagList[tagname].numrefs;
}

Function: SetTagTableItem
Declaration: void SetTagTableItem(const std::string tagname, void * newTagTableItem);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::SetTagTableItem
//
// Purpose:
//    Set the pointer to a tag table item for a given tag.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::SetTagTableItem(const std::string tagname, void * newTagTableItem)
{
    tagList[tagname].tagTableItem = newTagTableItem;
}

Function: GetTagTableItem
Declaration: void * GetTagTableItem(const std::string tagname);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetTagTableItem
//
// Purpose:
//    Return the pointer to a tag table item for a given tag.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void *
ColorTableAttributes::GetTagTableItem(const std::string tagname)
{
    return tagList[tagname].tagTableItem;
}

Function: CheckTagInTagList
Declaration: bool CheckTagInTagList(const std::string tagname);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::CheckTagInTagList
//
// Purpose:
//    Returns true if the tag is in the tagList, and false otherwise.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
bool
ColorTableAttributes::CheckTagInTagList(const std::string tagname)
{
    return tagList.find(tagname) != tagList.end();
}

Function: RemoveUnusedTagsFromTagTable
Declaration: void RemoveUnusedTagsFromTagTable(std::vector<void *> &tagTableItems);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::RemoveUnusedTagsFromTagTable
//
// Purpose:
//    Returns true if the tag is in the tagList, and false otherwise.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::RemoveUnusedTagsFromTagTable(std::vector<void *> &tagTableItems)
{
    for (auto itr = tagList.begin(); itr != tagList.end();)
    {
        if (itr->second.numrefs <= 0)
        {
            // if this tag list item has an associated tag table entry
            if (itr->second.tagTableItem)
                tagTableItems.push_back(itr->second.tagTableItem);
            // else - there is no tag table entry to delete so we can continue
            
            itr = tagList.erase(itr);
        }
        else
            itr ++;
    }
}

Function: GetNewTagNames
Declaration: void GetNewTagNames(std::vector<std::string> &tagsToAdd);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::GetNewTagNames
//
// Purpose:
//    Gets the names of tags that should likely be added to the tag table.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::GetNewTagNames(std::vector<std::string> &tagsToAdd)
{
    // populate tags list
    // iterate thru each color table
    for (int i = 0; i < GetNumColorTables(); i ++)
    {
        auto ccpl = GetColorTables(i);
        // only try to add tags if the ccpl thinks it has new info
        if (ccpl.GetTagChangesMade())
        {
            // iterate thru each tag in the given color table
            for (int j = 0; j < ccpl.GetNumTags(); j ++)
            {
                std::string currtag = ccpl.GetTag(j);
                tagsToAdd.push_back(currtag);
            }
            // tell the ccpl that we have taken note of all of its tag changes
            ccpl.SetTagChangesMade(false);
        }
    }
}

Function: FilterTableByTag
Declaration: bool FilterTableByTag(const ColorControlPointList &ccpl);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::FilterTableByTag
//
// Purpose:
//    TODO
//
// Programmer: Justin Privitera
// Creation:   07/13/23
//
// Modifications:
//
// ****************************************************************************
bool
ColorTableAttributes::FilterTableByTag(const ColorControlPointList &ccpl)
{
    bool tagFound = false;
    // go thru global tags
    for (const auto& mapitem : tagList)
    {
        // if the global tag is active
        if (mapitem.second.active)
        {
            tagFound = false;
            // go thru local tags
            for (int k = 0; k < ccpl.GetNumTags(); k ++)
            {
                // if the current global tag is the same as our local tag
                if (mapitem.first == ccpl.GetTag(k))
                {
                    tagFound = true;
                    break;
                }
            }
            if (tagFound == GetTagsMatchAny())
            // If both are true, that means...
            // 1) tagsMatchAny is true so we only need one tag from 
            //    the global tag list to be present in the local tag
            //    list, AND
            // 2) tagFound is true, so there is no need to keep 
            //    searching for a tag that is in both the local and
            //    global tag lists. Thus we can end iteration early.
            // If both are false, that means...
            // 1) tagsMatchAny is false so we need every tag from the
            //    global tag list to be present in the local tag list, AND
            // 2) tagFound is false, so there exists a global tag that
            //    is not in the local tag list, hence we can give up 
            //    early because we know that this color table does not
            //    have every tag in the global tag list.
                break;
        }
    }
    // we mark the color table as active or inactive
    return tagFound;
}

Function: FilterTablesByTag
Declaration: void FilterTablesByTag();
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::FilterTablesByTag
//
// Purpose:
//    Filters color tables by tag, setting tables to active if they are within
//    the current tag filtering selection.
//
// Programmer: Justin Privitera
// Creation:   06/27/23
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::FilterTablesByTag()
{
    // for each color table
    for (int i = 0; i < GetNumColorTables(); i ++)
    {
        // we mark the color table as active or inactive
        if (i >= 0 && i < active.size())
            active[i] = FilterTableByTag(GetColorTables(i));;
    }
}

Function: PrintTagList
Declaration: void PrintTagList();
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::PrintTagList
//
// Purpose:
//    TODO
//
// Programmer: Justin Privitera
// Creation:   TODO
//
// Modifications:
//
// ****************************************************************************
void
ColorTableAttributes::PrintTagList()
{
    for (auto itr = tagList.begin(); itr != tagList.end(); itr ++)
    {
        std::cout << itr->first << ":" << std::endl;
        std::cout << "   active: " << itr->second.active << std::endl;
        std::cout << "   numrefs: " << itr->second.numrefs << std::endl;
        std::cout << "   tagTableItem valid: " << (itr->second.tagTableItem ? "yes" : "no") << std::endl;
    }
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: ColorTableAttributes::ProcessOldVersions
//
// Purpose:
//   This method allows handling of older config/session files that may
//   contain fields that are no longer present or have been modified/renamed.
//
// Programmer: Justin Privitera
// Creation:   May 26 2022
//
// Modifications:
//   Justin Privitera, Wed Feb  1 14:43:55 PST 2023
//   Add logic for `taggingFlag`, removed in 3.4.
//
// ****************************************************************************
#include <visit-config.h>
#ifdef VIEWER
#include <avtCallback.h>
#endif

void
ColorTableAttributes::ProcessOldVersions(DataNode *parentNode,
                                         const char *configVersion)
{
#if VISIT_OBSOLETE_AT_VERSION(3,5,0)
#error This code is obsolete in this version. Please remove it.
#else
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("ColorTableAttributes");
    if(searchNode == 0)
        return;

    if (VersionLessThan(configVersion, "3.3.0"))
    {
        DataNode *k = 0;
        if ((k = searchNode->GetNode("activeContinuous")) != 0)
        {
#ifdef VIEWER
            avtCallback::IssueWarning(DeprecationMessage("activeContinuous", "3.5.0"));
#endif
            searchNode->AddNode(new DataNode("defaultContinuous", k->AsString()));
            searchNode->RemoveNode(k);
        }
        if ((k = searchNode->GetNode("activeDiscrete")) != 0)
        {
#ifdef VIEWER
            avtCallback::IssueWarning(DeprecationMessage("activeDiscrete", "3.5.0"));
#endif
            searchNode->AddNode(new DataNode("defaultDiscrete", k->AsString()));
            searchNode->RemoveNode(k);
        }
    }
#endif

#if VISIT_OBSOLETE_AT_VERSION(3,6,0)
#error This code is obsolete in this version. Please remove it.
#else
    if(parentNode == 0)
        return;

    DataNode *searchNode2 = parentNode->GetNode("ColorTableAttributes");
    if(searchNode2 == 0)
        return;

    if (VersionLessThan(configVersion, "3.4.0"))
    {
        DataNode *k = 0;
        if ((k = searchNode2->GetNode("taggingFlag")) != 0)
        {
#ifdef VIEWER
            avtCallback::IssueWarning(DeprecationMessage("taggingFlag", "3.6.0"));
#endif
            searchNode2->RemoveNode(k);
        }
    }
#endif
}

